# Context under which the agent is deployed. The full URL will be protocol://host:port/agentContext
agentContext=/jolokia
# Hostaddress to which the HTTP server should bind to.	
host=InetAddress.getLocalHost()
# Hostaddress to which the HTTP server should bind to.	
port=8778
# User to be used for authentication (along with a password)
user=
# Password used for authentication (user is then required, too)
password=
# HTTP protocol to use. Should be either http or https. For the SSL stack there are various additional configuration options.
protocol=http
# Size of request backlog before requests get discarded.	
backlog=10
# Threading model of the HTTP server:
# - fixed
# Thread pool with a fixed number of threads (see also threadNr)
# - cached
# Cached thread pool which creates threads on demand
# - single
# A single thread only
executor=single
# Number of threads to be used when the fixed execution model is chosen.
threadNr=5
# Path to the SSL keystore to use (https only)	
keystore=
# Keystore password (https only)	
keystorePassword=
# Whether client certificates should be used for authentication (https only). (true or false).	
useSslClientAuthentication=false
# If set to true and if the agent is attached to a Glassfish server, then during startup the AMX subsystem is booted so that Glassfish specific MBeans are available. Otherwise, if set to false the AMX system is not booted.	
bootAmx=true
# Classnames (comma separated) of RequestDispatcher used in addition to the LocalRequestDispatcher. Dispatchers are a technique used by the JSR-160 proxy to dispatch (or 'route') a request to a different destination.	
dispatcherClasses=org.jolokia.jsr160.Jsr160RequestDispatcher
# Location of the policy file to use. This is either a URL which can read from (like a file: or http: URL) or with the special protocol classpath: which is used for looking up the policy file in the web application's classpath. See Section 4.1.7, “Policy Location” for details about this parameter.	file:///home/jolokia/jolokia-access.xml for a file based access to the policy file. Default is classpath:/jolokia-access.xml
policyLocation=classpath:/jolokia-access.xml
# Debugging state after startup. Can be changed via the config MBean during runtime.	 Default: false
debug=false
# Entries to keep in the history. Can be changed at runtime via the config MBean.	 Default: 10
historyMaxEntries=10
# Maximum number of entries to keep in the local debug history (if enabled). Can be changed via the config MBean at runtime.	 Default: 100
debugMaxEntries=100
# Maximum depth when traversing bean properties. If set to 0, depth checking is disabled	 Default: 15
maxDepth=15
# Maximum size of collections returned when serializing to JSON. When set to 0, collections are never truncated.	 Default: 1000
maxCollectionSize=1000
# Maximum number of objects which are traversed when serializing a single response. Use this as an airbag to avoid boosting your memory and network traffic. Nevertheless, when set to 0 no limit is imposed.	 Default: 0
maxObjects=0
# Qualifier to add to the ObjectName of Jolokia's own MBeans. This can become necessary if more than one agent is active within a servlet container. This qualifier is added to the ObjectName of this agent with a comma. For example a mbeanQualifier with the value qualifier=own will result in Jolokia server handler MBean with the name jolokia:type=ServerHandler,qualifier=own	
mbeanQualifier=
# MIME to use for the JSON responses	 Default: text/plain
mimeType=text/plain
# This option specifies in which order the key-value properties within ObjectNames as returned by list or search are returned. By default this is the so called 'canonical order' in which the keys are sorted alphabetically. If this option is set to false, then the natural order is used, i.e. the object name as it was registered. This option can be overridden with a query parameter of the same name.	 Default: true
canonicalNaming=true
# Whether to include a stacktrace of an exception in case of an error. By default it it set to true in which case the stacktrace is always included. If set to false, no stacktrace is included. If the value is runtime a stacktrace is only included for RuntimeExceptions. This global option can be overridden with a query parameter.	 Default: true
includeStackTrace=true
# When this parameter is set to true, then an exception thrown will be serialized as JSON and included in the response under the key error_value. No stacktrace information will be included, though. This global option can be overridden by a query parameter of the same name.	 Default: false
serializeException=false
# Extra options passed to an detector after successful detection of an application server. See http://www.jolokia.org/reference/html/agents.html for an explanation.	
detectorOptions=